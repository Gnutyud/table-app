{"version":3,"sources":["componets/TableBody.tsx","componets/MyPagination.tsx","componets/Search.tsx","componets/Sort.tsx","App.tsx","index.tsx"],"names":["TableBody","props","usersData","map","user","id","parse","firstName","lastName","email","gender","formatDate","birthday","salary","formatPhoneNumber","phone","MyPagination","pageNumbers","i","totalPages","push","Pagination","First","onClick","firstPage","Prev","prevPage","number","Item","activePage","active","currentPage","Next","nextPage","Last","lastPage","Search","useState","search","setSearch","className","style","width","type","placeholder","value","onChange","e","searchText","target","onSearchHandler","Sort","Form","Select","sortField","disabled","App","setCurrentPage","users","length","totalUsers","setTotalUsers","Math","ceil","searchData","setSearchData","setSortField","num","code","newNum","match","join","finalUsers","useMemo","myUsers","regex","RegExp","filter","toString","replace","sort","a","b","localeCompare","indexOfLastUser","indexOfFirstUser","slice","Badge","bg","Table","striped","hover","bordered","size","isoDate","date","Date","year","getFullYear","month","getMonth","dt","getDate","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ab44969.chunk.js","sourcesContent":["import parse from \"html-react-parser\";\r\nimport React from \"react\";\r\nconst TableBody = (props: any) => {\r\n  return (\r\n    <>\r\n      {props.usersData.map((user: any) => (\r\n        <tr key={user.id}>\r\n          <td>{user.id}</td>\r\n          <td>{parse(user.firstName)}</td>\r\n          <td>{parse(user.lastName)}</td>\r\n          <td>{parse(user.email)}</td>\r\n          <td>{parse(user.gender)}</td>\r\n          <td>{props.formatDate(user.birthday)}</td>\r\n          <td>{user.salary}</td>\r\n          <td>{props.formatPhoneNumber(user.phone, 84)}</td>\r\n        </tr>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\nexport default TableBody;\r\n","import { Pagination } from \"react-bootstrap\";\r\nconst MyPagination = (props: any) => {\r\n  let pageNumbers = [];\r\n  for (let i = 1; i <= props.totalPages; i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <Pagination>\r\n      <Pagination.First onClick={() => props.firstPage()} />\r\n      <Pagination.Prev onClick={() => props.prevPage()} />\r\n      {pageNumbers.map((number) => (\r\n        <Pagination.Item\r\n          key={number}\r\n          onClick={() => props.activePage(number)}\r\n          active={props.currentPage === number}>\r\n          {number}\r\n        </Pagination.Item>\r\n      ))}\r\n      <Pagination.Next onClick={() => props.nextPage()} />\r\n      <Pagination.Last onClick={() => props.lastPage()} />\r\n    </Pagination>\r\n  );\r\n};\r\nexport default MyPagination;\r\n","import { useState } from \"react\";\r\n\r\nconst Search = (props: any) => {\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const onInputChange = (searchText: string) => {\r\n    setSearch(searchText);\r\n    props.onSearchHandler(searchText);\r\n  };\r\n  return (\r\n    <div className=\"input-group\">\r\n      <input\r\n        style={{ width: \"100%\" }}\r\n        type=\"search\"\r\n        className=\"form-control\"\r\n        placeholder=\"search...\"\r\n        value={search}\r\n        onChange={(e) => onInputChange(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import { Form } from \"react-bootstrap\";\r\nconst Sort = (props: any) => {\r\n  const selectHandler = (e: any) => {\r\n    props.sortField(e.target.value);\r\n  };\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"Default select example\"\r\n      className=\"col\"\r\n      onChange={selectHandler}>\r\n      <option disabled>Select field to sort</option>\r\n      <option value=\"id\">Id</option>\r\n      <option value=\"firstName\">First Name</option>\r\n      <option value=\"lastName\">Last Name</option>\r\n      <option value=\"email\">Email</option>\r\n      <option value=\"birthday\">Birthday</option>\r\n      <option value=\"salary\">Salary</option>\r\n    </Form.Select>\r\n  );\r\n};\r\nexport default Sort;\r\n","import { Table } from \"react-bootstrap\";\nimport { Badge } from \"react-bootstrap\";\nimport users from \"./data/users.json\";\nimport { useState, useMemo } from \"react\";\nimport TableBody from \"./componets/TableBody\";\nimport MyPagination from \"./componets/MyPagination\";\nimport Search from \"./componets/Search\";\nimport Sort from \"./componets/Sort\";\nconst App: React.FC = () => {\n  // Declare state and variable\n  const [currentPage, setCurrentPage] = useState(1);\n  const usersPerPage = 10;\n  const [totalUsers, setTotalUsers] = useState(users.length);\n  const totalPages = Math.ceil(totalUsers / usersPerPage);\n  const [searchData, setSearchData] = useState(\"\");\n  const [sortField, setSortField] = useState(\"\");\n\n  // Convert Iso Date to dd/mm/yy format\n  const formatDate = (isoDate: string) => {\n    let date = new Date(isoDate);\n    let year = date.getFullYear();\n    let month: number | string = date.getMonth() + 1;\n    let dt: number | string = date.getDate();\n\n    if (dt < 10) {\n      dt = \"0\" + dt;\n    }\n    if (month < 10) {\n      month = \"0\" + month;\n    }\n\n    return `${dt}/${month}/${year}`;\n  };\n  // Convert phone number\n  const formatPhoneNumber = (num: string, code: number) => {\n    let newNum = num.match(/[0-9]/g)?.join(\"\");\n    return `(+${code})${newNum}`;\n  };\n  // active page (change page when click in pagination)\n  const activePage = (num: number) => {\n    setCurrentPage(num);\n  };\n  // firstPage\n  const firstPage = () => {\n    setCurrentPage(1);\n  };\n  // previous page\n  const prevPage = () => {\n    if (currentPage === 1) {\n      return;\n    }\n    setCurrentPage((num) => num - 1);\n  };\n  // next page\n  const nextPage = () => {\n    console.log(currentPage);\n    console.log(totalPages);\n\n    if (currentPage === totalPages) {\n      return;\n    }\n    setCurrentPage((num) => num + 1);\n  };\n  // last page\n  const lastPage = () => {\n    setCurrentPage(totalPages);\n  };\n  // onSearch handle function\n  const onSearchHandler = (searchText: string) => {\n    setSearchData(searchText);\n    setCurrentPage(1);\n  };\n  // Final data\n  const finalUsers = useMemo(() => {\n    let myUsers = users;\n    //  on search handler\n    if (searchData) {\n      const regex = new RegExp(searchData, \"gmi\");\n      let matches = users.filter((user) => {\n        return (\n          user.id.toString().match(regex) ||\n          user.firstName.match(regex) ||\n          user.lastName.match(regex) ||\n          user.birthday.match(regex) ||\n          user.email.match(regex) ||\n          user.phone.match(regex) ||\n          user.gender.match(regex) ||\n          user.salary.toString().match(regex)\n        );\n      });\n\n      // Replace matches search and highlight them\n      myUsers = matches.map((user) => {\n        return {\n          id: user.id,\n          firstName: user.firstName.replace(\n            regex,\n            `<span style=\"background-color:yellow;\">${searchData}</span>`,\n          ),\n          lastName: user.lastName.replace(\n            regex,\n            `<span style=\"background-color:yellow;\">${searchData}</span>`,\n          ),\n          email: user.email.replace(\n            regex,\n            `<span style=\"background-color:yellow;\">${searchData}</span>`,\n          ),\n          gender: user.gender.replace(\n            regex,\n            `<span style=\"background-color:yellow;\">${searchData}</span>`,\n          ),\n          birthday: user.birthday,\n          salary: user.salary,\n          phone: formatPhoneNumber(user.phone, 84),\n        };\n      });\n    }\n    setTotalUsers(myUsers.length);\n    // sort field\n    if (sortField) {\n      myUsers = myUsers.sort(\n        (a: Record<string, any>, b: Record<string, any>) => {\n          if (sortField === \"id\" || sortField === \"salary\") {\n            return a[sortField] - b[sortField];\n          }\n          return a[sortField].localeCompare(b[sortField]);\n        },\n      );\n    }\n    // Get current user for each page (this logic use for pagination every time)\n    let indexOfLastUser = currentPage * usersPerPage;\n    let indexOfFirstUser = indexOfLastUser - usersPerPage;\n    // return users data of current page\n    return myUsers.slice(indexOfFirstUser, indexOfLastUser);\n  }, [searchData, currentPage, sortField]);\n  return (\n    <div className=\"container-fluid px-4\">\n      <h1 className=\"my-4\">\n        A simple <Badge bg=\"secondary\">Table App</Badge>\n      </h1>\n      <div className=\"row justify-content-between mb-4\">\n        <div className=\"col-md-3\">\n          <div className=\"row justify-content-start\">\n            <div className=\"col-4 align-self-center h5\">Order by</div>\n            <Sort sortField={(value: string) => setSortField(value)} />\n          </div>\n        </div>\n        <div className=\"col-md-5\">\n          <Search onSearchHandler={onSearchHandler} />\n        </div>\n      </div>\n\n      <Table striped hover bordered size=\"sm\">\n        <thead>\n          <tr>\n            <th>Id</th>\n            <th>First Name</th>\n            <th>Last Name</th>\n            <th>Email</th>\n            <th>Gender</th>\n            <th>Birthday</th>\n            <th>Salary</th>\n            <th>Phone</th>\n          </tr>\n        </thead>\n        <tbody>\n          <TableBody\n            usersData={finalUsers}\n            formatPhoneNumber={formatPhoneNumber}\n            formatDate={formatDate}\n          />\n        </tbody>\n      </Table>\n      {finalUsers.length > 0 && (\n        <MyPagination\n          totalPages={totalPages}\n          activePage={activePage}\n          currentPage={currentPage}\n          nextPage={nextPage}\n          lastPage={lastPage}\n          prevPage={prevPage}\n          firstPage={firstPage}\n        />\n      )}\n      {finalUsers.length === 0 && <h3 className=\"centered\">User not Found!</h3>}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}